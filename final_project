#Disease Spread Analysis

import csv
import numpy as np
import random as rd
import pandas as pd

# Letter of the case the user wants to run
#######CASE = str(input('Which case do you want to run? '))
# the number of days a Person stays infectious
DAYS_INFECTIOUS = 10

class Person:
    """
    Creates a Person that could be infected
    
    Input:
        id: the person's id (unique identifier)
        
    Output:
        None
    """

    def __init__(self, id):
        self.id = str(id)
        self.status = 0
        self.days_infected = 0
        self.hospitalized = 0
        
    # updates the number of days the person has had the status of 1 (infected)
    def update_days_infected(self):
        if self.status == 1:
            self.days_infected += 1
        
		# increments that status by 1 to update the status
    def update_status(self):
        self.status += 1
    
    def update_hospitalized(self):
        if self.days_infected >=6:
            self.hospitalized = 1
        else:
            self.hospitalized = 0

""" hospital_count function returns the total number of people hospitalized"""
def hospital_count(personDict):
    # sets variable number_hospitalized
    number_hospitalized = 0
    
    # loops through each person in personDict, checks their hospitalized status, increments by 1 if the person is hospitalized
    for person in personDict.values():
        if person.hospitalized == 1:
            number_hospitalized += 1
    return number_hospitalized
    
  
class Group:
    """
    Group object that has multiple persons in the group which can infect the group
    
    Input:
        group_ID: the unique identifier for the group
        probability: the probability of infection within the group
        memberList: list of members in the group
        headcount: number of people in the group
        numberOfInfectious: number of people that are infectious (they can infect other people)
        status: if the group is Open or Closed based on its headcount

    """
    def __init__(self, group_ID, probability, memberList, headcount):
        self.group_ID = group_ID
        self.prob = probability
        self.memberList = memberList
        self.numberOfInfectious = 0
        self.headcount = headcount
        self.status = "Open"
        
    # gets the number of infectious people in a group
    def number_infectious(self, personDict, group):
        # resets numberOfInfectious to 0 to avoid double counting when looping
        self.numberOfInfectious = 0
        
        # iterates over each member in the groups memberList
        for member in group.memberList:
            
            # checks if the status is 1 (infected) and that the days infected is not 0 (on day 0, a person is not infectious)
            if personDict[str(member)].status == 1 and personDict[str(member)].days_infected != 0:
                # increments numberOfInfectious by 1
                self.numberOfInfectious += 1
        return self.numberOfInfectious
    
    # gets the new infections in each group
    def check_new_infections(self, personDict, group):
        
        # iterates over each member in the groups memberList
        for member in group.memberList:
            # loops for the number of infectious people in the group
            for i in range(self.numberOfInfectious):
                # checks if the members status is 0 (susceptible)
                if personDict[str(member)].status == 0:
                    # generates random number between 0 and 1 to determine if the person is infected
                    infection_prob = np.random.rand()
                    # if the random number (infection_prob) is smaller than self.prob, then the person is infected
                    if infection_prob < self.prob:
                        # updates persons status
                        personDict[str(member)].update_status()
        
    # updates the infected to the recovered status once they are no longer infectious (determined by k or DAYS_INFECTIOUS)
    def update_infections_to_recovered(self, personDict, group):
        # iterates over each person in the groups memberList
        for member in group.memberList:
            # checks if the persons days_infected attribute is equal to the given DAYS_INFECTIOUS + 1 (to account for the day they are infected but not infectious)
            if personDict[str(member)].days_infected == DAYS_INFECTIOUS:
                # updates status to 2 (recovered)
                personDict[str(member)].update_status()
                personDict[str(member)].days_infected = 0
    
    def check_group_hospitalize(self, personDict, group):   
        for member in group.memberList:
            if personDict[str(member)].hospitalized == True:
            	return "Closed"                
            else:
                self.status = "Open"
    
    # changes the status attribute of the group if its headcount is greater than the given max headCount 
    def change_status(self, headcount_close, personDict, group):
        # checks if the status is already closed to ensure all currently closed groups remain closed
        if self.status == "Closed":
            self.status = "Closed"
        # checks if the attribute of the headcount is greater than headcount_close or if the check_group_hospitalize method returns "Closed"
        elif self.headcount >= headcount_close or self.check_group_hospitalize(personDict, group) == "Closed":
            # changes status to "Closed"
            self.status = "Closed"
        else:
            # if not greater than or equal to OR , changes status to Open
            self.status = "Open"

# reads csv file with data and creates Group and Person objects for each Group and Person in the csv
def readFile():
    # initalizes a list and dictionary to hold the group objects and person objects respectively.
    groupListMaster = []
    personDictMaster = {}
    
    # the file name is given be a 
    filename = 'group_info_case_C.csv' #+ CASE + '.csv'  # name of group information file
    with open(filename, 'r') as csvfile:
        reader = csv.DictReader(csvfile)
        for row in reader:
            # "row" is a dictionary with column names as keys and row contents (strings) as values
            # convert members from comma-separated string to list of integers
            memberList = [int(i) for i in row["members"].split(',')]
            
            # iterates over memberList 
            for member in memberList:
            # instantiates an object for Person method
                personDictMaster[str(member)] = personDictMaster.get(Person(str(member)), Person(str(member)))
            # adds Group object to groupList
            groupListMaster.append(Group(row["group_ID"], float(row["prob"]), memberList, int(row["headcount"])))
            
    # list to hold Person objects
    personList = []
    # iterates over personDict values 
    for person in personDictMaster.values():
        # appends objects to list
        personList.append(person)
    
    return groupListMaster, personDictMaster, personList
    
# simulation for infections. Runs until there are no person objects with the status of 1 (infected)    
def simulation(headcount_close, initial_infected):
    
    # calls readFile() and stores return in groupList, personDict, and personList
    groupList, personDict, personList = readFile()

    
    # randomly chooses the infected persons
    infectedPerson = rd.sample(personList, initial_infected)

    # iterates over random Person objects selected to be infected
    for infected in infectedPerson:
        # gets the person object 
        person = personDict.get(str(infected.id))
        # updates the status to infected
        person.update_status()

    # initializes totalInfected to initialInfected
    totalInfected = initial_infected

    day = 0
    
    # iterates over each group object in groupList
    for group in groupList:
        # changes group status according to headCount
        group.change_status(headcount_close, personDict, group)
    max_hospitalized = 0   

    # keeps looping while there are still infected people
    while totalInfected != 0:
        
        # gets the total number of people hospitalized
        num_in_hospital = hospital_count(personDict)
        
            
        for group in groupList:
        # changes group status according to headCount
            group.change_status(headcount_close, personDict, group)
        
        
        
        # iterates over groupList to get each group
        for group in groupList:
            # finds the number of infectious people 
            numberOfInfectious = group.number_infectious(personDict, group)
            # checks all members of the group are not already infectious
            if numberOfInfectious < len(group.memberList) and group.status != "Closed":
                # gets the persons who have been infected
                group.check_new_infections(personDict, group)
        
        
        # iterates over groupList to get each group
        for group in groupList:
            # updates infections to recovered if the person has been infectious for 3 days
            group.update_infections_to_recovered(personDict, group)  
        
        
        # iterates over each group object in groupList
        for person in personDict.values():
            person.update_hospitalized()
            
        # resets total infected
        totalInfected = 0
        
        # iterates over personDict values
        for person in personDict.values():
            # checks if the status is 1 and increments totalInfected
            if person.status == 1:
                totalInfected += 1
        
        for person in personDict.values():
            # updates each infected persons days_infected
            person.update_days_infected()
        
        # checks if the current total of people in the hospital is greater than the current maximum to find peak hospitalization
        if num_in_hospital > max_hospitalized:
            max_hospitalized = num_in_hospital
        
        # increments days by one (each loop is a day)
        day+= 1
    
    # number of people effected by the group closure
    effected_by_closure = 0
    # number of people who are in the recovered status
    numberRecovered = 0
    
    # iterates over each group in the groupList
    for group in groupList:
        # checks if the headcount attribute for the group is greater than the max group headcount allowed
        if group.status == "Closed":
            # adds the number of members in the memberlist for the group to headCountClosed
            effected_by_closure += len(group.memberList)
    # iterates over every person in personDict        
    for person in personDict.values():
        # checks if the persons status is 2 (recovered)
        if person.status == 2:
            #increments numberRecovered by 1
            numberRecovered += 1
    
        
        
        
    return max_hospitalized, effected_by_closure, numberRecovered, day

# list to track peak hospitalization for each simulation
max_hospitalized_list = []

# list to track the total effected by closure of groups (double counting allowed)
effected_by_closure_list = []

# list to track number of people who recovered (who were infected)
numberRecovered_list = []

# list to track the head count closed for each simulation
headcount_list = []

# list to track the initial infection for each simulation
initial_infected_list = []

# list to track the length of the epidemic (how many days until no one is infected)
epidemic_duration_list = []

# runs the simluate m times with the headcount changing
def monte_carlo(m, headcount_close, initial_infected):
    
    for i in range(m):
        # calls simulation to get outputs
        max_hospitalized, effected_by_closure, numberRecovered, day = simulation(headcount_close, initial_infected)
        
        # appends values to respective lists
        max_hospitalized_list.append(max_hospitalized)
        effected_by_closure_list.append(effected_by_closure)
        numberRecovered_list.append(numberRecovered)
        initial_infected_list.append(initial_infected)
        headcount_list.append(headcount_close)
        epidemic_duration_list.append(day)
    # returns the lists that hold the values for each simulation
    return max_hospitalized_list, effected_by_closure_list, numberRecovered_list, initial_infected_list, headcount_list, epidemic_duration_list
    
    
def main():
      
    
    # calls readFile() to get groupList 
    groupList, personDict, personList = readFile()
    # initalizes variable maxHeadCount to get the largest group headcount
    maxHeadCount = 0
    # iterates over each group in groupList
    for group in groupList:
        # checks if the group.headcount attribute is larger than the current maxHeadCount
        if group.headcount > maxHeadCount:
            maxHeadCount = group.headcount
            
    
    # loops for a range 2 to the maximum headcount (+ 1 to account for exclusivity)
    for initial_infected in [2, 20, 40]:
        
        for headcount in range(2, maxHeadCount + 1):
            # gets the average of the objFunction for the headcount
            max_hospitalized_list, effected_by_closure_list, numberRecovered_list, initial_infected_list, headcount_list, epidemic_duration_list = monte_carlo(1, headcount, initial_infected)
            
    
    
    # opens file, overwrites whatever is in the file
    with open('dso499_final_project.csv', 'w', newline='') as file:
        file_out = csv.writer(file)
        # writes out the row (header) with the column labels as follows
        file_out.writerow(["initial_infected", "maximum_hospitalized", "effected_by_closure", "number_recovered", "closed_headcount", "epidemic_duration"])
        
        # loops through each list in parallel and writes out the values in one row per loop
        for initial, maximum, effected, recovered, closed_headcount, epidemic_duration in zip(initial_infected_list, max_hospitalized_list, effected_by_closure_list, numberRecovered_list, headcount_list, epidemic_duration_list):
            
            file_out.writerow([initial, maximum, effected, recovered, closed_headcount, epidemic_duration])

            
main()
